"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keychainRequestSign = exports.hasKeychainBeenUsed = exports.isKeychainInstalled = exports.keychain = void 0;
// TODO: Add better typing
/* interface IRequestTransfer extends KeychainFunction {
  0: 'requestHandshake'
  1: {
    from: string
    to: string
    amount: number
    symbol: AssetSymbol
    memo?: string
  }
} */
/**
 *
 * @param window Window object of your browser
 * @param fn Keychain function name
 * @param args Function arguments
 *
 * Example 1: keychain(window, 'requestTransfer', sender, receiver, amount, memo, asset)
 *
 * Example 2: keychain(window, 'requestTransfer', 'test', 'therealwolf', 5, 'test memo', 'HIVE')
 *
 * More info: https://github.com/stoodkev/hive-keychain
 *
 * Return Object:
 * success => whether it was successfully transferred
 *
 * msg => error message
 *
 * cancel => keychain popup was cancelled by the user
 *
 * notInstalled => keychain is not yet installed
 *
 * notActive => keychain was used before but is not active right now and
 * has to either be clicked on or set to allow current page
 */
const keychain = (window, fn, ...args) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { installed, used } = yield exports.isKeychainInstalled(window);
        if (!installed) {
            return {
                success: false,
                msg: '',
                notInstalled: !installed,
                notActive: used,
                cancel: false,
            };
        }
        return new Promise((resolve) => {
            window.hive_keychain[fn](...args, (r) => {
                if (r.error === 'user_cancel') {
                    return resolve(Object.assign({ success: false, msg: r.error, cancel: true }, r));
                }
                if (r.success) {
                    return resolve(Object.assign({ success: true, msg: r.result }, r));
                }
                return resolve(Object.assign({ success: false, msg: r.message }, r));
            });
        });
    }
    catch (error) {
        return { success: false, msg: error.message };
    }
});
exports.keychain = keychain;
const isKeychainInstalled = (window) => __awaiter(void 0, void 0, void 0, function* () {
    const used = exports.hasKeychainBeenUsed();
    if (!window.hive_keychain)
        return { installed: false, used };
    try {
        yield (() => {
            return new Promise((resolve) => {
                window.hive_keychain.requestHandshake((r) => {
                    if (r.error) {
                        throw new Error('missing');
                    }
                    else {
                        resolve(true);
                    }
                });
            });
        });
    }
    catch (error) {
        return { installed: false, used };
    }
    if (!exports.hasKeychainBeenUsed())
        localStorage.setItem('hasKeychain', 'true');
    return { installed: true, used: true };
});
exports.isKeychainInstalled = isKeychainInstalled;
const hasKeychainBeenUsed = () => {
    return Boolean(localStorage.getItem('hasKeychain'));
};
exports.hasKeychainBeenUsed = hasKeychainBeenUsed;
/**
 * Wrapper for requestSignBuffer that allows for setting of title without breaking callback
 */
const keychainRequestSign = (window, title, message, key, account, rpc) => {
    return new Promise((resolve) => {
        exports.keychain(window, 'requestSignBuffer', account, message, key, (r) => {
            if (r.error === 'user_cancel') {
                return resolve(Object.assign({ success: false, msg: r.error, cancel: true }, r));
            }
            if (r.success) {
                return resolve(Object.assign({ success: true, msg: r.result }, r));
            }
            return resolve(Object.assign({ success: false, msg: r.message }, r));
        }, rpc, title);
    });
};
exports.keychainRequestSign = keychainRequestSign;
//# sourceMappingURL=index.js.map