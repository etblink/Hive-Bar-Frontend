"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ow_1 = require("ow");
const LogFormats_1 = require("../format/LogFormats");
const FallbackLog_1 = require("../util/FallbackLog");
const LogLevel_1 = require("./LogLevel");
const LogMetadata_1 = require("./LogMetadata");
const PortableEnv_1 = require("./PortableEnv");
const StaticConfig_1 = require("./StaticConfig");
class LiveLogConfig {
    constructor(params) {
        this.levelEvaluationEnvNames = [];
        this.level = LogLevel_1.LogLevel.DEFAULT_LEVEL;
        this.metadata = LogMetadata_1.LogMetadata.EMPTY_METADATA;
        this.nextReevaluateTimestampMs = 0;
        this.levelEvaluationEnvNames = params.levelEvaluationEnvNames;
        ow_1.default(this.levelEvaluationEnvNames, "levelEvaluationEnvNames", ow_1.default.array.ofType(ow_1.default.string));
        this.fallbackLog = params.fallbackLog;
        ow_1.default(this.fallbackLog, "fallbackLog", ow_1.default.function);
        this.defaultFormat = params.defaultFormat;
        ow_1.default(this.defaultFormat, "defaultFormat", ow_1.default.object);
        this.format = this.defaultFormat;
        this.evaluateIfRequired();
    }
    setLevelEvaluationEnvNames(levelEvaluationEnvNames) {
        this.levelEvaluationEnvNames = levelEvaluationEnvNames;
        this.evaluateIfRequired();
    }
    getLevel() {
        return this.level;
    }
    getFormat() {
        return this.format;
    }
    getMetadata() {
        return this.metadata;
    }
    evaluateIfRequired() {
        if (Date.now() < this.nextReevaluateTimestampMs) {
            return;
        }
        try {
            this.nextReevaluateTimestampMs = Date.now() + StaticConfig_1.StaticConfig.REEVALUATE_CONFIG_AFTER_MS;
            this.evaluate();
        }
        catch (error) {
            this.fallbackLog(`Could not evaluate live log config: ${error}: ${error.stack}`);
        }
    }
    evaluate() {
        this.format = this.evaluateFormat();
        this.level = this.evaluateLogLevel();
        this.metadata = this.evaluateMetadata();
    }
    evaluateFormat() {
        const formatStr = PortableEnv_1.PortableEnv(StaticConfig_1.StaticConfig.LOG_FORMAT_ENV);
        if (formatStr) {
            return LogFormats_1.LogFormats.valueOf(formatStr);
        }
        else {
            return this.defaultFormat;
        }
    }
    evaluateLogLevel() {
        const primaryLevelEvaluation = this.chooseMostVerboseLevel(this.getEnvValues(this.levelEvaluationEnvNames));
        if (primaryLevelEvaluation) {
            return primaryLevelEvaluation;
        }
        const leastLevelEvaluation = this.chooseMostVerboseLevel(this.getEnvValues([StaticConfig_1.StaticConfig.LEAST_LEVEL_ENV]));
        if (leastLevelEvaluation) {
            return leastLevelEvaluation;
        }
        return LogLevel_1.LogLevel.DEFAULT_LEVEL;
    }
    getEnvValues(envNames) {
        const envValuesOrUndefined = envNames.map(envName => PortableEnv_1.PortableEnv(envName));
        return envValuesOrUndefined.filter(val => !!val).map(elem => elem || "unreachable");
    }
    chooseMostVerboseLevel(levelList) {
        const definedLevels = levelList.map(level => LogLevel_1.LogLevel.valueOf(level));
        if (definedLevels.length === 0) {
            return undefined;
        }
        const mostVerboseLevel = definedLevels.reduce((theMostVerboseLevel, currLevel) => LogLevel_1.LogLevel.moreVerbose(theMostVerboseLevel, currLevel));
        return mostVerboseLevel;
    }
    evaluateMetadata() {
        try {
            const metadataStr = PortableEnv_1.PortableEnv(StaticConfig_1.StaticConfig.LOG_METADATA_ENV);
            if (metadataStr) {
                const metadataObj = JSON.parse(metadataStr);
                return this.removeTagFromMetadata(metadataObj);
            }
        }
        catch (error) {
            FallbackLog_1.FallbackLog.log(`Could not parse value of ${StaticConfig_1.StaticConfig.LOG_METADATA_ENV} env: ${error}`);
        }
        return LogMetadata_1.LogMetadata.EMPTY_METADATA;
    }
    removeTagFromMetadata(metadata) {
        const { tag } = metadata, metadataWithoutTag = __rest(metadata, ["tag"]);
        return metadataWithoutTag;
    }
}
exports.LiveLogConfig = LiveLogConfig;
//# sourceMappingURL=LiveLogConfig.js.map