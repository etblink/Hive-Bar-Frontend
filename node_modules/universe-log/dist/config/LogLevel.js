"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const UniverseLogError_1 = require("../error/UniverseLogError");
var LogLevel;
(function (LogLevel) {
    LogLevel["error"] = "error";
    LogLevel["warn"] = "warn";
    LogLevel["info"] = "info";
    LogLevel["http"] = "http";
    LogLevel["verbose"] = "verbose";
    LogLevel["debug"] = "debug";
    LogLevel["silly"] = "silly";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
(function (LogLevel) {
    LogLevel.LEVELS_VALUES = {
        [LogLevel.error]: 0,
        [LogLevel.warn]: 1,
        [LogLevel.info]: 2,
        [LogLevel.http]: 3,
        [LogLevel.verbose]: 4,
        [LogLevel.debug]: 5,
        [LogLevel.silly]: 6,
    };
    LogLevel.LEVELS_BY_NAME = {
        [LogLevel.error]: LogLevel.error,
        [LogLevel.warn]: LogLevel.warn,
        [LogLevel.info]: LogLevel.info,
        [LogLevel.http]: LogLevel.http,
        [LogLevel.verbose]: LogLevel.verbose,
        [LogLevel.debug]: LogLevel.debug,
        [LogLevel.silly]: LogLevel.silly,
    };
    LogLevel.DEFAULT_LEVEL = LogLevel.info;
    function valueOf(name) {
        if (typeof LogLevel.LEVELS_BY_NAME[name] === "undefined") {
            const availableLevels = Object.keys(LogLevel.LEVELS_BY_NAME).join(", ");
            throw new UniverseLogError_1.UniverseLogError(`There is no such log level: '${name}'. Available levels: [ ${availableLevels} ]`);
        }
        return LogLevel.LEVELS_BY_NAME[name];
    }
    LogLevel.valueOf = valueOf;
    function levelToValue(name) {
        if (typeof LogLevel.LEVELS_VALUES[name] === "undefined") {
            const availableLevels = Object.keys(LogLevel.LEVELS_BY_NAME).join(", ");
            throw new UniverseLogError_1.UniverseLogError(`There is no such log level: '${name}'. Available levels: [ ${availableLevels} ]`);
        }
        return LogLevel.LEVELS_VALUES[name];
    }
    LogLevel.levelToValue = levelToValue;
    function isLessOrEquallyVerbose(args) {
        return levelToValue(args.level) <= levelToValue(args.threshold);
    }
    LogLevel.isLessOrEquallyVerbose = isLessOrEquallyVerbose;
    function moreVerbose(a, b) {
        return LogLevel.LEVELS_VALUES[a] > LogLevel.LEVELS_VALUES[b] ? a : b;
    }
    LogLevel.moreVerbose = moreVerbose;
    function lessVerbose(a, b) {
        return LogLevel.LEVELS_VALUES[a] < LogLevel.LEVELS_VALUES[b] ? a : b;
    }
    LogLevel.lessVerbose = lessVerbose;
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
//# sourceMappingURL=LogLevel.js.map