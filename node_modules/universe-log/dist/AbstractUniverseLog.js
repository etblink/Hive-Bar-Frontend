"use strict";
/* tslint:disable:no-console */
Object.defineProperty(exports, "__esModule", { value: true });
const LogLevel_1 = require("./config/LogLevel");
const LogEngine_1 = require("./LogEngine");
/**
 * Logging levels conforms NPM logging levels
 */
class AbstractUniverseLog {
    constructor(propsOrEngine) {
        if (propsOrEngine instanceof LogEngine_1.LogEngine) {
            this.logEngine = propsOrEngine;
        }
        else {
            this.logEngine = new LogEngine_1.LogEngine(propsOrEngine);
        }
    }
    getLevel() {
        return this.logEngine.getLevel();
    }
    getFormatName() {
        return this.logEngine.getFormatName();
    }
    getMetadata() {
        return this.logEngine.getMetadata();
    }
    isDebug() {
        const levelThreshold = LogLevel_1.LogLevel.LEVELS_VALUES[this.getLevel()];
        return levelThreshold >= LogLevel_1.LogLevel.LEVELS_VALUES.debug;
    }
    error(...msg) {
        this.doLog(LogLevel_1.LogLevel.error, msg);
    }
    errorGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.error, genFn);
    }
    warn(...msg) {
        this.doLog(LogLevel_1.LogLevel.warn, msg);
    }
    warnGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.warn, genFn);
    }
    info(...msg) {
        this.doLog(LogLevel_1.LogLevel.info, msg);
    }
    infoGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.info, genFn);
    }
    http(...msg) {
        this.doLog(LogLevel_1.LogLevel.http, msg);
    }
    httpGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.http, genFn);
    }
    verbose(...msg) {
        this.doLog(LogLevel_1.LogLevel.verbose, msg);
    }
    verboseGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.verbose, genFn);
    }
    debug(...msg) {
        this.doLog(LogLevel_1.LogLevel.debug, msg);
    }
    debugGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.debug, genFn);
    }
    silly(...msg) {
        this.doLog(LogLevel_1.LogLevel.silly, msg);
    }
    sillyGen(genFn) {
        this.doEfficientLog(LogLevel_1.LogLevel.silly, genFn);
    }
    /**
     * Calls generator fn only if logging level is reached.
     */
    doEfficientLog(level, msgGeneratorFn) {
        this.logEngine.doEfficientLog(level, msgGeneratorFn);
    }
    doLog(level, ...msgsObjs) {
        this.logEngine.doLog(level, ...msgsObjs);
    }
    getEngine() {
        return this.logEngine;
    }
}
exports.AbstractUniverseLog = AbstractUniverseLog;
//# sourceMappingURL=AbstractUniverseLog.js.map